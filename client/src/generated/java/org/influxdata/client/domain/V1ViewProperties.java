/*
 * Influx API Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.influxdata.client.domain;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.influxdata.client.domain.DashboardColor;
import org.influxdata.client.domain.DashboardQuery;
import org.influxdata.client.domain.RenamableField;
import org.influxdata.client.domain.V1ViewPropertiesAxes;
import org.influxdata.client.domain.V1ViewPropertiesDecimalPoints;
import org.influxdata.client.domain.V1ViewPropertiesLegend;

/**
 * V1ViewProperties
 */

public class V1ViewProperties {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CHRONOGRAF_V1("chronograf-v1");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.CHRONOGRAF_V1;

  public static final String SERIALIZED_NAME_QUERIES = "queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private List<DashboardQuery> queries = new ArrayList<>();

  public static final String SERIALIZED_NAME_AXES = "axes";
  @SerializedName(SERIALIZED_NAME_AXES)
  private V1ViewPropertiesAxes axes = null;

  /**
   * The viewport for a view&#39;s graph/visualization
   */
  @JsonAdapter(GraphTypeEnum.Adapter.class)
  public enum GraphTypeEnum {
    SINGLE_STAT("single-stat"),
    
    LINE("line"),
    
    LINE_PLUS_SINGLE_STAT("line-plus-single-stat"),
    
    LINE_STACKED("line-stacked"),
    
    LINE_STEPPLOT("line-stepplot"),
    
    BAR("bar"),
    
    GAUGE("gauge"),
    
    TABLE("table");

    private String value;

    GraphTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GraphTypeEnum fromValue(String text) {
      for (GraphTypeEnum b : GraphTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GraphTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GraphTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GraphTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return GraphTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_GRAPH_TYPE = "graphType";
  @SerializedName(SERIALIZED_NAME_GRAPH_TYPE)
  private GraphTypeEnum graphType = GraphTypeEnum.LINE;

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private List<DashboardColor> colors = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEGEND = "legend";
  @SerializedName(SERIALIZED_NAME_LEGEND)
  private V1ViewPropertiesLegend legend = null;

  public static final String SERIALIZED_NAME_TABLE_OPTIONS = "tableOptions";
  @SerializedName(SERIALIZED_NAME_TABLE_OPTIONS)
  private Object tableOptions = null;

  public static final String SERIALIZED_NAME_FIELD_OPTIONS = "fieldOptions";
  @SerializedName(SERIALIZED_NAME_FIELD_OPTIONS)
  private List<RenamableField> fieldOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_FORMAT = "timeFormat";
  @SerializedName(SERIALIZED_NAME_TIME_FORMAT)
  private String timeFormat = null;

  public static final String SERIALIZED_NAME_DECIMAL_POINTS = "decimalPoints";
  @SerializedName(SERIALIZED_NAME_DECIMAL_POINTS)
  private V1ViewPropertiesDecimalPoints decimalPoints = null;

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public V1ViewProperties queries(List<DashboardQuery> queries) {
    this.queries = queries;
    return this;
  }

  public V1ViewProperties addQueriesItem(DashboardQuery queriesItem) {
    if (this.queries == null) {
      this.queries = new ArrayList<>();
    }
    this.queries.add(queriesItem);
    return this;
  }

   /**
   * Get queries
   * @return queries
  **/
  @ApiModelProperty(value = "")
  public List<DashboardQuery> getQueries() {
    return queries;
  }

  public void setQueries(List<DashboardQuery> queries) {
    this.queries = queries;
  }

  public V1ViewProperties axes(V1ViewPropertiesAxes axes) {
    this.axes = axes;
    return this;
  }

   /**
   * Get axes
   * @return axes
  **/
  @ApiModelProperty(value = "")
  public V1ViewPropertiesAxes getAxes() {
    return axes;
  }

  public void setAxes(V1ViewPropertiesAxes axes) {
    this.axes = axes;
  }

  public V1ViewProperties graphType(GraphTypeEnum graphType) {
    this.graphType = graphType;
    return this;
  }

   /**
   * The viewport for a view&#39;s graph/visualization
   * @return graphType
  **/
  @ApiModelProperty(value = "The viewport for a view's graph/visualization")
  public GraphTypeEnum getGraphType() {
    return graphType;
  }

  public void setGraphType(GraphTypeEnum graphType) {
    this.graphType = graphType;
  }

  public V1ViewProperties colors(List<DashboardColor> colors) {
    this.colors = colors;
    return this;
  }

  public V1ViewProperties addColorsItem(DashboardColor colorsItem) {
    if (this.colors == null) {
      this.colors = new ArrayList<>();
    }
    this.colors.add(colorsItem);
    return this;
  }

   /**
   * Colors define color encoding of data into a visualization
   * @return colors
  **/
  @ApiModelProperty(value = "Colors define color encoding of data into a visualization")
  public List<DashboardColor> getColors() {
    return colors;
  }

  public void setColors(List<DashboardColor> colors) {
    this.colors = colors;
  }

  public V1ViewProperties legend(V1ViewPropertiesLegend legend) {
    this.legend = legend;
    return this;
  }

   /**
   * Get legend
   * @return legend
  **/
  @ApiModelProperty(value = "")
  public V1ViewPropertiesLegend getLegend() {
    return legend;
  }

  public void setLegend(V1ViewPropertiesLegend legend) {
    this.legend = legend;
  }

  public V1ViewProperties tableOptions(Object tableOptions) {
    this.tableOptions = tableOptions;
    return this;
  }

   /**
   * Get tableOptions
   * @return tableOptions
  **/
  @ApiModelProperty(value = "")
  public Object getTableOptions() {
    return tableOptions;
  }

  public void setTableOptions(Object tableOptions) {
    this.tableOptions = tableOptions;
  }

  public V1ViewProperties fieldOptions(List<RenamableField> fieldOptions) {
    this.fieldOptions = fieldOptions;
    return this;
  }

  public V1ViewProperties addFieldOptionsItem(RenamableField fieldOptionsItem) {
    if (this.fieldOptions == null) {
      this.fieldOptions = new ArrayList<>();
    }
    this.fieldOptions.add(fieldOptionsItem);
    return this;
  }

   /**
   * fieldOptions represent the fields retrieved by the query with customization options
   * @return fieldOptions
  **/
  @ApiModelProperty(value = "fieldOptions represent the fields retrieved by the query with customization options")
  public List<RenamableField> getFieldOptions() {
    return fieldOptions;
  }

  public void setFieldOptions(List<RenamableField> fieldOptions) {
    this.fieldOptions = fieldOptions;
  }

  public V1ViewProperties timeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
    return this;
  }

   /**
   * timeFormat describes the display format for time values according to moment.js date formatting
   * @return timeFormat
  **/
  @ApiModelProperty(value = "timeFormat describes the display format for time values according to moment.js date formatting")
  public String getTimeFormat() {
    return timeFormat;
  }

  public void setTimeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
  }

  public V1ViewProperties decimalPoints(V1ViewPropertiesDecimalPoints decimalPoints) {
    this.decimalPoints = decimalPoints;
    return this;
  }

   /**
   * Get decimalPoints
   * @return decimalPoints
  **/
  @ApiModelProperty(value = "")
  public V1ViewPropertiesDecimalPoints getDecimalPoints() {
    return decimalPoints;
  }

  public void setDecimalPoints(V1ViewPropertiesDecimalPoints decimalPoints) {
    this.decimalPoints = decimalPoints;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ViewProperties v1ViewProperties = (V1ViewProperties) o;
    return Objects.equals(this.type, v1ViewProperties.type) &&
        Objects.equals(this.queries, v1ViewProperties.queries) &&
        Objects.equals(this.axes, v1ViewProperties.axes) &&
        Objects.equals(this.graphType, v1ViewProperties.graphType) &&
        Objects.equals(this.colors, v1ViewProperties.colors) &&
        Objects.equals(this.legend, v1ViewProperties.legend) &&
        Objects.equals(this.tableOptions, v1ViewProperties.tableOptions) &&
        Objects.equals(this.fieldOptions, v1ViewProperties.fieldOptions) &&
        Objects.equals(this.timeFormat, v1ViewProperties.timeFormat) &&
        Objects.equals(this.decimalPoints, v1ViewProperties.decimalPoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, queries, axes, graphType, colors, legend, tableOptions, fieldOptions, timeFormat, decimalPoints);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ViewProperties {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    axes: ").append(toIndentedString(axes)).append("\n");
    sb.append("    graphType: ").append(toIndentedString(graphType)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    legend: ").append(toIndentedString(legend)).append("\n");
    sb.append("    tableOptions: ").append(toIndentedString(tableOptions)).append("\n");
    sb.append("    fieldOptions: ").append(toIndentedString(fieldOptions)).append("\n");
    sb.append("    timeFormat: ").append(toIndentedString(timeFormat)).append("\n");
    sb.append("    decimalPoints: ").append(toIndentedString(decimalPoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

