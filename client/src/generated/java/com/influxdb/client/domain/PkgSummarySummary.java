/*
 * Influx API Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.influxdb.client.domain;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.influxdb.client.domain.Bucket;
import com.influxdb.client.domain.Label;
import com.influxdb.client.domain.PkgSummarySummaryDashboards;
import com.influxdb.client.domain.PkgSummarySummaryLabelMappings;
import com.influxdb.client.domain.Variable;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * PkgSummarySummary
 */

public class PkgSummarySummary {
  public static final String SERIALIZED_NAME_BUCKETS = "buckets";
  @SerializedName(SERIALIZED_NAME_BUCKETS)
  private List<Bucket> buckets = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<Label> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_DASHBOARDS = "dashboards";
  @SerializedName(SERIALIZED_NAME_DASHBOARDS)
  private List<PkgSummarySummaryDashboards> dashboards = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABEL_MAPPINGS = "labelMappings";
  @SerializedName(SERIALIZED_NAME_LABEL_MAPPINGS)
  private List<PkgSummarySummaryLabelMappings> labelMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_VARIABLES = "variables";
  @SerializedName(SERIALIZED_NAME_VARIABLES)
  private List<Variable> variables = new ArrayList<>();

  public PkgSummarySummary buckets(List<Bucket> buckets) {
    this.buckets = buckets;
    return this;
  }

  public PkgSummarySummary addBucketsItem(Bucket bucketsItem) {
    if (this.buckets == null) {
      this.buckets = new ArrayList<>();
    }
    this.buckets.add(bucketsItem);
    return this;
  }

   /**
   * Get buckets
   * @return buckets
  **/
  @ApiModelProperty(value = "")
  public List<Bucket> getBuckets() {
    return buckets;
  }

  public void setBuckets(List<Bucket> buckets) {
    this.buckets = buckets;
  }

  public PkgSummarySummary labels(List<Label> labels) {
    this.labels = labels;
    return this;
  }

  public PkgSummarySummary addLabelsItem(Label labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @ApiModelProperty(value = "")
  public List<Label> getLabels() {
    return labels;
  }

  public void setLabels(List<Label> labels) {
    this.labels = labels;
  }

  public PkgSummarySummary dashboards(List<PkgSummarySummaryDashboards> dashboards) {
    this.dashboards = dashboards;
    return this;
  }

  public PkgSummarySummary addDashboardsItem(PkgSummarySummaryDashboards dashboardsItem) {
    if (this.dashboards == null) {
      this.dashboards = new ArrayList<>();
    }
    this.dashboards.add(dashboardsItem);
    return this;
  }

   /**
   * Get dashboards
   * @return dashboards
  **/
  @ApiModelProperty(value = "")
  public List<PkgSummarySummaryDashboards> getDashboards() {
    return dashboards;
  }

  public void setDashboards(List<PkgSummarySummaryDashboards> dashboards) {
    this.dashboards = dashboards;
  }

  public PkgSummarySummary labelMappings(List<PkgSummarySummaryLabelMappings> labelMappings) {
    this.labelMappings = labelMappings;
    return this;
  }

  public PkgSummarySummary addLabelMappingsItem(PkgSummarySummaryLabelMappings labelMappingsItem) {
    if (this.labelMappings == null) {
      this.labelMappings = new ArrayList<>();
    }
    this.labelMappings.add(labelMappingsItem);
    return this;
  }

   /**
   * Get labelMappings
   * @return labelMappings
  **/
  @ApiModelProperty(value = "")
  public List<PkgSummarySummaryLabelMappings> getLabelMappings() {
    return labelMappings;
  }

  public void setLabelMappings(List<PkgSummarySummaryLabelMappings> labelMappings) {
    this.labelMappings = labelMappings;
  }

  public PkgSummarySummary variables(List<Variable> variables) {
    this.variables = variables;
    return this;
  }

  public PkgSummarySummary addVariablesItem(Variable variablesItem) {
    if (this.variables == null) {
      this.variables = new ArrayList<>();
    }
    this.variables.add(variablesItem);
    return this;
  }

   /**
   * Get variables
   * @return variables
  **/
  @ApiModelProperty(value = "")
  public List<Variable> getVariables() {
    return variables;
  }

  public void setVariables(List<Variable> variables) {
    this.variables = variables;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PkgSummarySummary pkgSummarySummary = (PkgSummarySummary) o;
    return Objects.equals(this.buckets, pkgSummarySummary.buckets) &&
        Objects.equals(this.labels, pkgSummarySummary.labels) &&
        Objects.equals(this.dashboards, pkgSummarySummary.dashboards) &&
        Objects.equals(this.labelMappings, pkgSummarySummary.labelMappings) &&
        Objects.equals(this.variables, pkgSummarySummary.variables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buckets, labels, dashboards, labelMappings, variables);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PkgSummarySummary {\n");
    sb.append("    buckets: ").append(toIndentedString(buckets)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    dashboards: ").append(toIndentedString(dashboards)).append("\n");
    sb.append("    labelMappings: ").append(toIndentedString(labelMappings)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

