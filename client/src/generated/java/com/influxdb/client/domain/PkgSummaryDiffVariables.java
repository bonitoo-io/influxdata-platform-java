/*
 * Influx API Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.influxdb.client.domain;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.influxdb.client.domain.VariableProperties;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;

/**
 * PkgSummaryDiffVariables
 */

public class PkgSummaryDiffVariables {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OLD_DESCRIPTION = "oldDescription";
  @SerializedName(SERIALIZED_NAME_OLD_DESCRIPTION)
  private String oldDescription;

  public static final String SERIALIZED_NAME_NEW_DESCRIPTION = "newDescription";
  @SerializedName(SERIALIZED_NAME_NEW_DESCRIPTION)
  private String newDescription;

  public static final String SERIALIZED_NAME_OLD_ARGS = "oldArgs";
  @SerializedName(SERIALIZED_NAME_OLD_ARGS)
  @JsonAdapter(PkgSummary_diff_variablesOldArgsAdapter.class)
  private VariableProperties oldArgs = null;

  public static final String SERIALIZED_NAME_NEW_ARGS = "newArgs";
  @SerializedName(SERIALIZED_NAME_NEW_ARGS)
  @JsonAdapter(PkgSummary_diff_variablesNewArgsAdapter.class)
  private VariableProperties newArgs = null;

  public PkgSummaryDiffVariables id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PkgSummaryDiffVariables name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PkgSummaryDiffVariables oldDescription(String oldDescription) {
    this.oldDescription = oldDescription;
    return this;
  }

   /**
   * Get oldDescription
   * @return oldDescription
  **/
  @ApiModelProperty(value = "")
  public String getOldDescription() {
    return oldDescription;
  }

  public void setOldDescription(String oldDescription) {
    this.oldDescription = oldDescription;
  }

  public PkgSummaryDiffVariables newDescription(String newDescription) {
    this.newDescription = newDescription;
    return this;
  }

   /**
   * Get newDescription
   * @return newDescription
  **/
  @ApiModelProperty(value = "")
  public String getNewDescription() {
    return newDescription;
  }

  public void setNewDescription(String newDescription) {
    this.newDescription = newDescription;
  }

  public PkgSummaryDiffVariables oldArgs(VariableProperties oldArgs) {
    this.oldArgs = oldArgs;
    return this;
  }

   /**
   * Get oldArgs
   * @return oldArgs
  **/
  @ApiModelProperty(value = "")
  public VariableProperties getOldArgs() {
    return oldArgs;
  }

  public void setOldArgs(VariableProperties oldArgs) {
    this.oldArgs = oldArgs;
  }

  public PkgSummaryDiffVariables newArgs(VariableProperties newArgs) {
    this.newArgs = newArgs;
    return this;
  }

   /**
   * Get newArgs
   * @return newArgs
  **/
  @ApiModelProperty(value = "")
  public VariableProperties getNewArgs() {
    return newArgs;
  }

  public void setNewArgs(VariableProperties newArgs) {
    this.newArgs = newArgs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PkgSummaryDiffVariables pkgSummaryDiffVariables = (PkgSummaryDiffVariables) o;
    return Objects.equals(this.id, pkgSummaryDiffVariables.id) &&
        Objects.equals(this.name, pkgSummaryDiffVariables.name) &&
        Objects.equals(this.oldDescription, pkgSummaryDiffVariables.oldDescription) &&
        Objects.equals(this.newDescription, pkgSummaryDiffVariables.newDescription) &&
        Objects.equals(this.oldArgs, pkgSummaryDiffVariables.oldArgs) &&
        Objects.equals(this.newArgs, pkgSummaryDiffVariables.newArgs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, oldDescription, newDescription, oldArgs, newArgs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PkgSummaryDiffVariables {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oldDescription: ").append(toIndentedString(oldDescription)).append("\n");
    sb.append("    newDescription: ").append(toIndentedString(newDescription)).append("\n");
    sb.append("    oldArgs: ").append(toIndentedString(oldArgs)).append("\n");
    sb.append("    newArgs: ").append(toIndentedString(newArgs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public class PkgSummary_diff_variablesOldArgsAdapter implements JsonDeserializer<Object>, JsonSerializer<Object> {

    public PkgSummary_diff_variablesOldArgsAdapter() {
    }

    @Override
    public Object deserialize(final JsonElement json, final Type typeOfT, final JsonDeserializationContext context) throws JsonParseException {

      List<String> discriminator = Arrays.asList("type");

      JsonObject jsonObject = json.getAsJsonObject();

      String[] types = discriminator.stream().map(d -> jsonObject.get(d).getAsString()).toArray(String[]::new);

      return deserialize(types, jsonObject, context);
    }

    @Override
    public JsonElement serialize(Object object, Type typeOfSrc, JsonSerializationContext context) {

      return context.serialize(object);
    }

    private Object deserialize(final String[] types, final JsonElement json, final JsonDeserializationContext context) {

      if (Arrays.equals(new String[]{ "query" }, types)) {
        return context.deserialize(json, QueryVariableProperties.class);
      }
      if (Arrays.equals(new String[]{ "constant" }, types)) {
        return context.deserialize(json, ConstantVariableProperties.class);
      }
      if (Arrays.equals(new String[]{ "map" }, types)) {
        return context.deserialize(json, MapVariableProperties.class);
      }

      return context.deserialize(json, Object.class);
    }
  }
  public class PkgSummary_diff_variablesNewArgsAdapter implements JsonDeserializer<Object>, JsonSerializer<Object> {

    public PkgSummary_diff_variablesNewArgsAdapter() {
    }

    @Override
    public Object deserialize(final JsonElement json, final Type typeOfT, final JsonDeserializationContext context) throws JsonParseException {

      List<String> discriminator = Arrays.asList("type");

      JsonObject jsonObject = json.getAsJsonObject();

      String[] types = discriminator.stream().map(d -> jsonObject.get(d).getAsString()).toArray(String[]::new);

      return deserialize(types, jsonObject, context);
    }

    @Override
    public JsonElement serialize(Object object, Type typeOfSrc, JsonSerializationContext context) {

      return context.serialize(object);
    }

    private Object deserialize(final String[] types, final JsonElement json, final JsonDeserializationContext context) {

      if (Arrays.equals(new String[]{ "query" }, types)) {
        return context.deserialize(json, QueryVariableProperties.class);
      }
      if (Arrays.equals(new String[]{ "constant" }, types)) {
        return context.deserialize(json, ConstantVariableProperties.class);
      }
      if (Arrays.equals(new String[]{ "map" }, types)) {
        return context.deserialize(json, MapVariableProperties.class);
      }

      return context.deserialize(json, Object.class);
    }
  }
}

